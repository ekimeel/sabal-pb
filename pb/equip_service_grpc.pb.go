// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: equip_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EquipServiceClient is the client API for EquipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EquipServiceClient interface {
	Get(ctx context.Context, in *EquipUUID, opts ...grpc.CallOption) (*Equip, error)
	GetAll(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*EquipList, error)
	Create(ctx context.Context, in *Equip, opts ...grpc.CallOption) (*Equip, error)
	Update(ctx context.Context, in *Equip, opts ...grpc.CallOption) (*Equip, error)
	Delete(ctx context.Context, in *EquipUUID, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type equipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEquipServiceClient(cc grpc.ClientConnInterface) EquipServiceClient {
	return &equipServiceClient{cc}
}

func (c *equipServiceClient) Get(ctx context.Context, in *EquipUUID, opts ...grpc.CallOption) (*Equip, error) {
	out := new(Equip)
	err := c.cc.Invoke(ctx, "/pb.EquipService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipServiceClient) GetAll(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*EquipList, error) {
	out := new(EquipList)
	err := c.cc.Invoke(ctx, "/pb.EquipService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipServiceClient) Create(ctx context.Context, in *Equip, opts ...grpc.CallOption) (*Equip, error) {
	out := new(Equip)
	err := c.cc.Invoke(ctx, "/pb.EquipService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipServiceClient) Update(ctx context.Context, in *Equip, opts ...grpc.CallOption) (*Equip, error) {
	out := new(Equip)
	err := c.cc.Invoke(ctx, "/pb.EquipService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *equipServiceClient) Delete(ctx context.Context, in *EquipUUID, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/pb.EquipService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EquipServiceServer is the server API for EquipService service.
// All implementations must embed UnimplementedEquipServiceServer
// for forward compatibility
type EquipServiceServer interface {
	Get(context.Context, *EquipUUID) (*Equip, error)
	GetAll(context.Context, *ListRequest) (*EquipList, error)
	Create(context.Context, *Equip) (*Equip, error)
	Update(context.Context, *Equip) (*Equip, error)
	Delete(context.Context, *EquipUUID) (*DeleteResponse, error)
	mustEmbedUnimplementedEquipServiceServer()
}

// UnimplementedEquipServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEquipServiceServer struct {
}

func (UnimplementedEquipServiceServer) Get(context.Context, *EquipUUID) (*Equip, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedEquipServiceServer) GetAll(context.Context, *ListRequest) (*EquipList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedEquipServiceServer) Create(context.Context, *Equip) (*Equip, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEquipServiceServer) Update(context.Context, *Equip) (*Equip, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEquipServiceServer) Delete(context.Context, *EquipUUID) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEquipServiceServer) mustEmbedUnimplementedEquipServiceServer() {}

// UnsafeEquipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EquipServiceServer will
// result in compilation errors.
type UnsafeEquipServiceServer interface {
	mustEmbedUnimplementedEquipServiceServer()
}

func RegisterEquipServiceServer(s grpc.ServiceRegistrar, srv EquipServiceServer) {
	s.RegisterService(&EquipService_ServiceDesc, srv)
}

func _EquipService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EquipUUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EquipService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipServiceServer).Get(ctx, req.(*EquipUUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EquipService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipServiceServer).GetAll(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Equip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EquipService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipServiceServer).Create(ctx, req.(*Equip))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Equip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EquipService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipServiceServer).Update(ctx, req.(*Equip))
	}
	return interceptor(ctx, in, info, handler)
}

func _EquipService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EquipUUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EquipServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EquipService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EquipServiceServer).Delete(ctx, req.(*EquipUUID))
	}
	return interceptor(ctx, in, info, handler)
}

// EquipService_ServiceDesc is the grpc.ServiceDesc for EquipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EquipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.EquipService",
	HandlerType: (*EquipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _EquipService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _EquipService_GetAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _EquipService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _EquipService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EquipService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "equip_service.proto",
}
